#!/usr/bin/env python

import sys
import json
import urllib

from twisted.python import log
from twisted.internet import reactor, protocol, task
from twisted.web.client import Agent, readBody
from twisted.words.protocols import irc

class StravaClub(object):
    def __init__(self, club_id, access_token, update_interval):
        self.club_id = club_id
        self.access_token = access_token
        self.update_interval = update_interval

        self.callback = lambda x: None
        self.activities_seen = set()

    def start(self):
        l = task.LoopingCall(self.update)
        l.start(self.update_interval)

    def update(self):
        log.msg("Updating data")

        url = 'https://www.strava.com/api/v3/clubs/%s/activities?%s' % (
            self.club_id,
            urllib.urlencode({
                # Prevent spam and also deleting an activity revealing the
                # 201st entry
                'per_page': 10 if self.activities_seen else 200,
                'access_token': self.access_token,
            }),
        )

        d = Agent(reactor).request('GET', url)

        def process_response(response):
            assert response.code == 200

            d = readBody(response)
            d.addCallback(self.process_body)

            return d

        def process_error(failure):
            log.err(failure)

        d.addCallback(process_response)
        d.addErrback(process_error)

        return d

    def process_body(self, body):
        # Don't callback if we're populating for the first time
        run_callbacks = bool(self.activities_seen)

        data = json.loads(body)
        prev = len(self.activities_seen)

        for x in reversed(data):
            if run_callbacks and x['id'] not in self.activities_seen:
                self.callback(x)

            self.activities_seen.add(x['id'])

        log.msg("%d new activities" % (len(self.activities_seen) - prev))

class LogBot(irc.IRCClient):
    TEMPLATE = """
        %(athlete)s (%(type)s): %(name)s (%(distance_km).1fkm) https://app.strava.com/activities/%(id)d
    """

    realname = "https://github.com/lamby/stravabot"

    def signedOn(self):
        self.join(self.factory.channel)

        self.factory.club.callback = self.new_activity

    def new_activity(self, activity):
        athlete = '%(firstname)s %(lastname)s' % activity['athlete']

        activity['athlete'] = athlete.strip()
        activity['distance_km'] = activity['distance'] / 1000.

        txt = self.TEMPLATE.strip() % activity

        self.msg('#%s' % self.factory.channel, txt.encode('utf8'))

class LogBotFactory(protocol.ClientFactory):
    def __init__(self, channel, nickname, club_id, access_token, update_interval):
        self.channel = channel
        self.nickname = nickname

        self.club = StravaClub(club_id, access_token, update_interval)
        self.club.start()

    def buildProtocol(self, addr):
        p = LogBot()
        p.factory = self
        p.nickname = self.nickname

        return p

    def clientConnectionLost(self, connector, reason):
        connector.connect()

    def clientConnectionFailed(self, connector, reason):
        reactor.stop()

if __name__ == '__main__':
    server, port, nickname, channel, club_id, access_token, update_interval = sys.argv[1:]

    log.startLogging(sys.stdout)

    f = LogBotFactory(
        channel,
        nickname,
        club_id,
        access_token,
        int(update_interval),
    )

    reactor.connectTCP(server, int(port), f)
    reactor.run()
