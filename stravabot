#!/usr/bin/env python

import sys
import socket
import eventlet
import requests

class StravaBot(object):
    def __init__(self, server, port, nickname, channel, club_id, access_token, update_interval):
        self.server = server
        self.port = int(port)
        self.nickname = nickname
        self.channel = channel
        self.club_id = int(club_id)
        self.access_token = access_token
        self.update_interval = int(update_interval)

        self.socket = socket.socket()
        self.connected = False
        self.seen = set()

    def run(self):
        self.socket.connect((self.server, self.port))

        self.send("NICK %s" % self.nickname)
        self.send("USER %(nick)s %(nick)s %(nick)s :%(url)s" % {
            'url': 'https://github.com/lamby/stravabot',
            'nick': self.nickname,
        })

        while True:
            data = self.socket.recv(4096)

            for line in data.split('\n'):
                line = line.strip()

                if not line:
                    continue

                print "< %s" % line

                if line.startswith('PING'):
                    self.send('PONG :%s' % line.split(':')[1])

                if ' 001 ' in line and not self.connected:
                    self.connected = True
                    self.send('JOIN #%s' % self.channel)
                    eventlet.spawn_n(self.poll, initial=True)

    def send(self, x):
        print "> %s" % x
        self.socket.send('%s\r\n' % x)

    def poll(self, initial=False):
        try:
            r = requests.get(
                'https://www.strava.com/api/v3/clubs/%d/activities' % self.club_id,
                params={
                    # Prevent spam & deleting entries revealing old ones
                    'per_page': 200 if initial else 5,
                    'access_token': self.access_token,
                },
            )

            for x in reversed(r.json()):
                if not initial and x['id'] not in self.seen:
                    self.emit(x)
                self.seen.add(x['id'])
        finally:
            eventlet.spawn_after(self.update_interval, self.poll)

    def emit(self, x):
        parts = (
            '\x0303%(firstname)s %(lastname)s\x0f:' % x['athlete'],
            '\x02%s\x0f' % x['name'],
            '(%.1fkm, %dm)' % (
                x['distance'] / 1000,
                x['total_elevation_gain'],
            ) if x['distance'] else '',
            '-- https://app.strava.com/activities/%d' % x['id'],
        )

        msg = ' '.join(x.strip().encode('utf-8') for x in parts if x)

        self.send('PRIVMSG #%s :%s' % (self.channel, msg))

if __name__ == '__main__':
    eventlet.monkey_patch()
    StravaBot(*sys.argv[1:]).run()
